schema {
  query: Query
  mutation: Mutation
}

type Query {
  achievement(limit: Int, offset: Int, where: achievement_WhereInput, orderBy: achievement_OrderByInput): [achievement]
  count_achievement(where: achievement_WhereInput): Int
  comment(limit: Int, offset: Int, where: comment_WhereInput, orderBy: comment_OrderByInput): [comment]
  count_comment(where: comment_WhereInput): Int
  commenttranslation(limit: Int, offset: Int, where: commenttranslation_WhereInput, orderBy: commenttranslation_OrderByInput): [commenttranslation]
  count_commenttranslation(where: commenttranslation_WhereInput): Int
  community(limit: Int, offset: Int, where: community_WhereInput, orderBy: community_OrderByInput): [community]
  count_community(where: community_WhereInput): Int
  communitydocumentation(limit: Int, offset: Int, where: communitydocumentation_WhereInput, orderBy: communitydocumentation_OrderByInput): [communitydocumentation]
  count_communitydocumentation(where: communitydocumentation_WhereInput): Int
  communitytranslation(limit: Int, offset: Int, where: communitytranslation_WhereInput, orderBy: communitytranslation_OrderByInput): [communitytranslation]
  count_communitytranslation(where: communitytranslation_WhereInput): Int
  contractinfo(limit: Int, offset: Int, where: contractinfo_WhereInput, orderBy: contractinfo_OrderByInput): [contractinfo]
  count_contractinfo(where: contractinfo_WhereInput): Int
  history(limit: Int, offset: Int, where: history_WhereInput, orderBy: history_OrderByInput): [history]
  count_history(where: history_WhereInput): Int
  period(limit: Int, offset: Int, where: period_WhereInput, orderBy: period_OrderByInput): [period]
  count_period(where: period_WhereInput): Int
  post(limit: Int, offset: Int, where: post_WhereInput, orderBy: post_OrderByInput): [post]
  count_post(where: post_WhereInput): Int
  posttag(limit: Int, offset: Int, where: posttag_WhereInput, orderBy: posttag_OrderByInput): [posttag]
  count_posttag(where: posttag_WhereInput): Int
  posttranslation(limit: Int, offset: Int, where: posttranslation_WhereInput, orderBy: posttranslation_OrderByInput): [posttranslation]
  count_posttranslation(where: posttranslation_WhereInput): Int
  postvotehistory(limit: Int, offset: Int, where: postvotehistory_WhereInput, orderBy: postvotehistory_OrderByInput): [postvotehistory]
  count_postvotehistory(where: postvotehistory_WhereInput): Int
  reply(limit: Int, offset: Int, where: reply_WhereInput, orderBy: reply_OrderByInput): [reply]
  count_reply(where: reply_WhereInput): Int
  replytranslation(limit: Int, offset: Int, where: replytranslation_WhereInput, orderBy: replytranslation_OrderByInput): [replytranslation]
  count_replytranslation(where: replytranslation_WhereInput): Int
  replyvotehistory(limit: Int, offset: Int, where: replyvotehistory_WhereInput, orderBy: replyvotehistory_OrderByInput): [replyvotehistory]
  count_replyvotehistory(where: replyvotehistory_WhereInput): Int
  tag(limit: Int, offset: Int, where: tag_WhereInput, orderBy: tag_OrderByInput): [tag]
  count_tag(where: tag_WhereInput): Int
  tagtranslation(limit: Int, offset: Int, where: tagtranslation_WhereInput, orderBy: tagtranslation_OrderByInput): [tagtranslation]
  count_tagtranslation(where: tagtranslation_WhereInput): Int
  user(limit: Int, offset: Int, where: user_WhereInput, orderBy: user_OrderByInput): [user]
  count_user(where: user_WhereInput): Int
  userachievement(limit: Int, offset: Int, where: userachievement_WhereInput, orderBy: userachievement_OrderByInput): [userachievement]
  count_userachievement(where: userachievement_WhereInput): Int
  usercommunity(limit: Int, offset: Int, where: usercommunity_WhereInput, orderBy: usercommunity_OrderByInput): [usercommunity]
  count_usercommunity(where: usercommunity_WhereInput): Int
  usercommunityrating(limit: Int, offset: Int, where: usercommunityrating_WhereInput, orderBy: usercommunityrating_OrderByInput): [usercommunityrating]
  count_usercommunityrating(where: usercommunityrating_WhereInput): Int
  userpermission(limit: Int, offset: Int, where: userpermission_WhereInput, orderBy: userpermission_OrderByInput): [userpermission]
  count_userpermission(where: userpermission_WhereInput): Int
  userreward(limit: Int, offset: Int, where: userreward_WhereInput, orderBy: userreward_OrderByInput): [userreward]
  count_userreward(where: userreward_WhereInput): Int
}

type achievement {
  id: Int!
  factCount: Int
  maxCount: Int
  achievementURI: String
  achievementsType: Int
  lowerValue: Int
  name: String
  description: String
  image: String
  communityId: String
  attrcommunityId: String
  attrEvent: String
  attrType: String
  userachievement(limit: Int, offset: Int, where: userachievement_WhereInput, orderBy: userachievement_OrderByInput): [userachievement]
}

type userachievement {
  id: String!
  userId: String!
  achievementId: Int!
  achievement(where: achievement_WhereInput, orderBy: achievement_OrderByInput, limit: Int, offset: Int): [achievement]
  user(where: user_WhereInput, orderBy: user_OrderByInput, limit: Int, offset: Int): [user]
}

input achievement_WhereInput {
  id: String
  factCount: String
  maxCount: String
  achievementURI: String
  achievementsType: String
  lowerValue: String
  name: String
  description: String
  image: String
  communityId: String
  attrcommunityId: String
  attrEvent: String
  attrType: String
}

input achievement_OrderByInput {
  id: OrderBy
  factCount: OrderBy
  maxCount: OrderBy
  achievementURI: OrderBy
  achievementsType: OrderBy
  lowerValue: OrderBy
  name: OrderBy
  description: OrderBy
  image: OrderBy
  communityId: OrderBy
  attrcommunityId: OrderBy
  attrEvent: OrderBy
  attrType: OrderBy
}

enum OrderBy {
  asc
  desc
}

type user {
  id: String!
  displayName: String
  postCount: Int
  replyCount: Int
  company: String
  position: String
  location: String
  about: String
  avatar: String
  creationTime: Int!
  ipfsHash: String
  ipfsHash2: String
  comment(limit: Int, offset: Int, where: comment_WhereInput, orderBy: comment_OrderByInput): [comment]
  commenttranslation(limit: Int, offset: Int, where: commenttranslation_WhereInput, orderBy: commenttranslation_OrderByInput): [commenttranslation]
  history(limit: Int, offset: Int, where: history_WhereInput, orderBy: history_OrderByInput): [history]
  post(limit: Int, offset: Int, where: post_WhereInput, orderBy: post_OrderByInput): [post]
  posttranslation(limit: Int, offset: Int, where: posttranslation_WhereInput, orderBy: posttranslation_OrderByInput): [posttranslation]
  postvotehistory(limit: Int, offset: Int, where: postvotehistory_WhereInput, orderBy: postvotehistory_OrderByInput): [postvotehistory]
  reply(limit: Int, offset: Int, where: reply_WhereInput, orderBy: reply_OrderByInput): [reply]
  replytranslation(limit: Int, offset: Int, where: replytranslation_WhereInput, orderBy: replytranslation_OrderByInput): [replytranslation]
  replyvotehistory(limit: Int, offset: Int, where: replyvotehistory_WhereInput, orderBy: replyvotehistory_OrderByInput): [replyvotehistory]
  userachievement(limit: Int, offset: Int, where: userachievement_WhereInput, orderBy: userachievement_OrderByInput): [userachievement]
  usercommunity(limit: Int, offset: Int, where: usercommunity_WhereInput, orderBy: usercommunity_OrderByInput): [usercommunity]
  usercommunityrating(limit: Int, offset: Int, where: usercommunityrating_WhereInput, orderBy: usercommunityrating_OrderByInput): [usercommunityrating]
  userpermission(limit: Int, offset: Int, where: userpermission_WhereInput, orderBy: userpermission_OrderByInput): [userpermission]
  userreward(limit: Int, offset: Int, where: userreward_WhereInput, orderBy: userreward_OrderByInput): [userreward]
}

type comment {
  id: String!
  id2: String
  ipfsHash: String
  ipfsHash2: String
  author: String!
  rating: Int
  postTime: Int!
  postId: String!
  parentReplyId: Int
  content: String!
  language: Int
  isDeleted: Int
  post(where: post_WhereInput, orderBy: post_OrderByInput, limit: Int, offset: Int): [post]
  user(where: user_WhereInput, orderBy: user_OrderByInput, limit: Int, offset: Int): [user]
  commenttranslation(limit: Int, offset: Int, where: commenttranslation_WhereInput, orderBy: commenttranslation_OrderByInput): [commenttranslation]
}

type post {
  id: String!
  id2: String
  ipfsHash: String
  ipfsHash2: String
  postType: Int!
  author: String!
  rating: Int
  postTime: Int
  lastMod: Int
  communityId: String!
  title: String!
  content: String!
  postContent: String!
  commentCount: Int
  replyCount: Int
  isDeleted: Int
  officialReply: Int
  bestReply: Int
  language: Int
  handle: String
  messengerType: Int
  comment(limit: Int, offset: Int, where: comment_WhereInput, orderBy: comment_OrderByInput): [comment]
  history(limit: Int, offset: Int, where: history_WhereInput, orderBy: history_OrderByInput): [history]
  community(where: community_WhereInput, orderBy: community_OrderByInput, limit: Int, offset: Int): [community]
  user(where: user_WhereInput, orderBy: user_OrderByInput, limit: Int, offset: Int): [user]
  posttag(limit: Int, offset: Int, where: posttag_WhereInput, orderBy: posttag_OrderByInput): [posttag]
  posttranslation(limit: Int, offset: Int, where: posttranslation_WhereInput, orderBy: posttranslation_OrderByInput): [posttranslation]
  postvotehistory(limit: Int, offset: Int, where: postvotehistory_WhereInput, orderBy: postvotehistory_OrderByInput): [postvotehistory]
  reply(limit: Int, offset: Int, where: reply_WhereInput, orderBy: reply_OrderByInput): [reply]
}

input comment_WhereInput {
  id: String
  id2: String
  ipfsHash: String
  ipfsHash2: String
  author: String
  rating: String
  postTime: String
  postId: String
  parentReplyId: String
  content: String
  language: String
  isDeleted: String
}

input comment_OrderByInput {
  id: OrderBy
  id2: OrderBy
  ipfsHash: OrderBy
  ipfsHash2: OrderBy
  author: OrderBy
  rating: OrderBy
  postTime: OrderBy
  postId: OrderBy
  parentReplyId: OrderBy
  content: OrderBy
  language: OrderBy
  isDeleted: OrderBy
}

type history {
  id: String!
  transactionHash: String!
  postId: String!
  replyId: String
  commentId: String
  eventEntity: String
  eventName: String
  actionUser: String!
  timeStamp: Int!
  post(where: post_WhereInput, orderBy: post_OrderByInput, limit: Int, offset: Int): [post]
  user(where: user_WhereInput, orderBy: user_OrderByInput, limit: Int, offset: Int): [user]
}

input post_WhereInput {
  id: String
  id2: String
  ipfsHash: String
  ipfsHash2: String
  postType: String
  author: String
  rating: String
  postTime: String
  lastMod: String
  communityId: String
  title: String
  content: String
  postContent: String
  commentCount: String
  replyCount: String
  isDeleted: String
  officialReply: String
  bestReply: String
  language: String
  handle: String
  messengerType: String
}

input post_OrderByInput {
  id: OrderBy
  id2: OrderBy
  ipfsHash: OrderBy
  ipfsHash2: OrderBy
  postType: OrderBy
  author: OrderBy
  rating: OrderBy
  postTime: OrderBy
  lastMod: OrderBy
  communityId: OrderBy
  title: OrderBy
  content: OrderBy
  postContent: OrderBy
  commentCount: OrderBy
  replyCount: OrderBy
  isDeleted: OrderBy
  officialReply: OrderBy
  bestReply: OrderBy
  language: OrderBy
  handle: OrderBy
  messengerType: OrderBy
}

input user_WhereInput {
  id: String
  displayName: String
  postCount: String
  replyCount: String
  company: String
  position: String
  location: String
  about: String
  avatar: String
  creationTime: String
  ipfsHash: String
  ipfsHash2: String
}

input user_OrderByInput {
  id: OrderBy
  displayName: OrderBy
  postCount: OrderBy
  replyCount: OrderBy
  company: OrderBy
  position: OrderBy
  location: OrderBy
  about: OrderBy
  avatar: OrderBy
  creationTime: OrderBy
  ipfsHash: OrderBy
  ipfsHash2: OrderBy
}

input history_WhereInput {
  id: String
  transactionHash: String
  postId: String
  replyId: String
  commentId: String
  eventEntity: String
  eventName: String
  actionUser: String
  timeStamp: String
}

input history_OrderByInput {
  id: OrderBy
  transactionHash: OrderBy
  postId: OrderBy
  replyId: OrderBy
  commentId: OrderBy
  eventEntity: OrderBy
  eventName: OrderBy
  actionUser: OrderBy
  timeStamp: OrderBy
}

type community {
  id: String!
  name: String
  description: String
  website: String
  communitySite: String
  language: String
  avatar: String
  isFrozen: Int
  creationTime: Int!
  postCount: Int
  documentationCount: Int
  deletedPostCount: Int
  replyCount: Int
  tagsCount: Int
  followingUsers: Int
  ipfsHash: String
  ipfsHash2: String
  communitydocumentation(limit: Int, offset: Int, where: communitydocumentation_WhereInput, orderBy: communitydocumentation_OrderByInput): [communitydocumentation]
  communitytranslation(limit: Int, offset: Int, where: communitytranslation_WhereInput, orderBy: communitytranslation_OrderByInput): [communitytranslation]
  post(limit: Int, offset: Int, where: post_WhereInput, orderBy: post_OrderByInput): [post]
  tag(limit: Int, offset: Int, where: tag_WhereInput, orderBy: tag_OrderByInput): [tag]
  usercommunity(limit: Int, offset: Int, where: usercommunity_WhereInput, orderBy: usercommunity_OrderByInput): [usercommunity]
  usercommunityrating(limit: Int, offset: Int, where: usercommunityrating_WhereInput, orderBy: usercommunityrating_OrderByInput): [usercommunityrating]
}

type communitydocumentation {
  id: String!
  documentationJSON: String
  ipfsHash: String
  community(where: community_WhereInput, orderBy: community_OrderByInput, limit: Int, offset: Int): [community]
}

input community_WhereInput {
  id: String
  name: String
  description: String
  website: String
  communitySite: String
  language: String
  avatar: String
  isFrozen: String
  creationTime: String
  postCount: String
  documentationCount: String
  deletedPostCount: String
  replyCount: String
  tagsCount: String
  followingUsers: String
  ipfsHash: String
  ipfsHash2: String
}

input community_OrderByInput {
  id: OrderBy
  name: OrderBy
  description: OrderBy
  website: OrderBy
  communitySite: OrderBy
  language: OrderBy
  avatar: OrderBy
  isFrozen: OrderBy
  creationTime: OrderBy
  postCount: OrderBy
  documentationCount: OrderBy
  deletedPostCount: OrderBy
  replyCount: OrderBy
  tagsCount: OrderBy
  followingUsers: OrderBy
  ipfsHash: OrderBy
  ipfsHash2: OrderBy
}

input communitydocumentation_WhereInput {
  id: String
  documentationJSON: String
  ipfsHash: String
}

input communitydocumentation_OrderByInput {
  id: OrderBy
  documentationJSON: OrderBy
  ipfsHash: OrderBy
}

type communitytranslation {
  id: String!
  communityId: String!
  name: String
  description: String
  language: String
  enableAutotranslation: Int
  community(where: community_WhereInput, orderBy: community_OrderByInput, limit: Int, offset: Int): [community]
}

input communitytranslation_WhereInput {
  id: String
  communityId: String
  name: String
  description: String
  language: String
  enableAutotranslation: String
}

input communitytranslation_OrderByInput {
  id: OrderBy
  communityId: OrderBy
  name: OrderBy
  description: OrderBy
  language: OrderBy
  enableAutotranslation: OrderBy
}

type tag {
  id: String!
  communityId: String!
  name: String!
  description: String
  postCount: Int
  deletedPostCount: Int
  language: Int
  ipfsHash: String
  ipfsHash2: String
  posttag(limit: Int, offset: Int, where: posttag_WhereInput, orderBy: posttag_OrderByInput): [posttag]
  community(where: community_WhereInput, orderBy: community_OrderByInput, limit: Int, offset: Int): [community]
  tagtranslation(limit: Int, offset: Int, where: tagtranslation_WhereInput, orderBy: tagtranslation_OrderByInput): [tagtranslation]
}

type posttag {
  id: String!
  postId: String!
  tagId: String!
  post(where: post_WhereInput, orderBy: post_OrderByInput, limit: Int, offset: Int): [post]
  tag(where: tag_WhereInput, orderBy: tag_OrderByInput, limit: Int, offset: Int): [tag]
}

input tag_WhereInput {
  id: String
  communityId: String
  name: String
  description: String
  postCount: String
  deletedPostCount: String
  language: String
  ipfsHash: String
  ipfsHash2: String
}

input tag_OrderByInput {
  id: OrderBy
  communityId: OrderBy
  name: OrderBy
  description: OrderBy
  postCount: OrderBy
  deletedPostCount: OrderBy
  language: OrderBy
  ipfsHash: OrderBy
  ipfsHash2: OrderBy
}

input posttag_WhereInput {
  id: String
  postId: String
  tagId: String
}

input posttag_OrderByInput {
  id: OrderBy
  postId: OrderBy
  tagId: OrderBy
}

type tagtranslation {
  id: String!
  tagId: String!
  name: String!
  description: String
  language: Int
  tag(where: tag_WhereInput, orderBy: tag_OrderByInput, limit: Int, offset: Int): [tag]
}

input tagtranslation_WhereInput {
  id: String
  tagId: String
  name: String
  description: String
  language: String
}

input tagtranslation_OrderByInput {
  id: OrderBy
  tagId: OrderBy
  name: OrderBy
  description: OrderBy
  language: OrderBy
}

type usercommunity {
  id: String!
  userId: String!
  communityId: String!
  community(where: community_WhereInput, orderBy: community_OrderByInput, limit: Int, offset: Int): [community]
  user(where: user_WhereInput, orderBy: user_OrderByInput, limit: Int, offset: Int): [user]
}

input usercommunity_WhereInput {
  id: String
  userId: String
  communityId: String
}

input usercommunity_OrderByInput {
  id: OrderBy
  userId: OrderBy
  communityId: OrderBy
}

type usercommunityrating {
  id: String!
  communityId: String!
  rating: Int
  userId: String!
  community(where: community_WhereInput, orderBy: community_OrderByInput, limit: Int, offset: Int): [community]
  user(where: user_WhereInput, orderBy: user_OrderByInput, limit: Int, offset: Int): [user]
}

input usercommunityrating_WhereInput {
  id: String
  communityId: String
  rating: String
  userId: String
}

input usercommunityrating_OrderByInput {
  id: OrderBy
  communityId: OrderBy
  rating: OrderBy
  userId: OrderBy
}

type posttranslation {
  id: String!
  postId: String!
  language: Int
  author: String!
  ipfsHash: String
  title: String!
  content: String
  post(where: post_WhereInput, orderBy: post_OrderByInput, limit: Int, offset: Int): [post]
  user(where: user_WhereInput, orderBy: user_OrderByInput, limit: Int, offset: Int): [user]
}

input posttranslation_WhereInput {
  id: String
  postId: String
  language: String
  author: String
  ipfsHash: String
  title: String
  content: String
}

input posttranslation_OrderByInput {
  id: OrderBy
  postId: OrderBy
  language: OrderBy
  author: OrderBy
  ipfsHash: OrderBy
  title: OrderBy
  content: OrderBy
}

type postvotehistory {
  id: String!
  postId: String!
  direction: Int
  userId: String!
  post(where: post_WhereInput, orderBy: post_OrderByInput, limit: Int, offset: Int): [post]
  user(where: user_WhereInput, orderBy: user_OrderByInput, limit: Int, offset: Int): [user]
}

input postvotehistory_WhereInput {
  id: String
  postId: String
  direction: String
  userId: String
}

input postvotehistory_OrderByInput {
  id: OrderBy
  postId: OrderBy
  direction: OrderBy
  userId: OrderBy
}

type reply {
  id: String!
  id2: String
  ipfsHash: String
  ipfsHash2: String
  author: String!
  rating: Int
  postTime: Int!
  postId: String!
  parentReplyId: Int!
  content: String!
  commentCount: Int
  isDeleted: Int
  isOfficialReply: Int
  isBestReply: Int
  isFirstReply: Int
  isQuickReply: Int
  language: Int
  handle: String
  messengerType: Int
  post(where: post_WhereInput, orderBy: post_OrderByInput, limit: Int, offset: Int): [post]
  user(where: user_WhereInput, orderBy: user_OrderByInput, limit: Int, offset: Int): [user]
  replytranslation(limit: Int, offset: Int, where: replytranslation_WhereInput, orderBy: replytranslation_OrderByInput): [replytranslation]
  replyvotehistory(limit: Int, offset: Int, where: replyvotehistory_WhereInput, orderBy: replyvotehistory_OrderByInput): [replyvotehistory]
}

type replytranslation {
  id: String!
  replyId: String!
  language: Int
  author: String!
  ipfsHash: String
  content: String
  reply(where: reply_WhereInput, orderBy: reply_OrderByInput, limit: Int, offset: Int): [reply]
  user(where: user_WhereInput, orderBy: user_OrderByInput, limit: Int, offset: Int): [user]
}

input reply_WhereInput {
  id: String
  id2: String
  ipfsHash: String
  ipfsHash2: String
  author: String
  rating: String
  postTime: String
  postId: String
  parentReplyId: String
  content: String
  commentCount: String
  isDeleted: String
  isOfficialReply: String
  isBestReply: String
  isFirstReply: String
  isQuickReply: String
  language: String
  handle: String
  messengerType: String
}

input reply_OrderByInput {
  id: OrderBy
  id2: OrderBy
  ipfsHash: OrderBy
  ipfsHash2: OrderBy
  author: OrderBy
  rating: OrderBy
  postTime: OrderBy
  postId: OrderBy
  parentReplyId: OrderBy
  content: OrderBy
  commentCount: OrderBy
  isDeleted: OrderBy
  isOfficialReply: OrderBy
  isBestReply: OrderBy
  isFirstReply: OrderBy
  isQuickReply: OrderBy
  language: OrderBy
  handle: OrderBy
  messengerType: OrderBy
}

input replytranslation_WhereInput {
  id: String
  replyId: String
  language: String
  author: String
  ipfsHash: String
  content: String
}

input replytranslation_OrderByInput {
  id: OrderBy
  replyId: OrderBy
  language: OrderBy
  author: OrderBy
  ipfsHash: OrderBy
  content: OrderBy
}

type replyvotehistory {
  id: String!
  replyId: String!
  direction: Int
  userId: String!
  reply(where: reply_WhereInput, orderBy: reply_OrderByInput, limit: Int, offset: Int): [reply]
  user(where: user_WhereInput, orderBy: user_OrderByInput, limit: Int, offset: Int): [user]
}

input replyvotehistory_WhereInput {
  id: String
  replyId: String
  direction: String
  userId: String
}

input replyvotehistory_OrderByInput {
  id: OrderBy
  replyId: OrderBy
  direction: OrderBy
  userId: OrderBy
}

type commenttranslation {
  id: String!
  commentId: String!
  language: Int
  author: String!
  ipfsHash: String
  content: String
  comment(where: comment_WhereInput, orderBy: comment_OrderByInput, limit: Int, offset: Int): [comment]
  user(where: user_WhereInput, orderBy: user_OrderByInput, limit: Int, offset: Int): [user]
}

input commenttranslation_WhereInput {
  id: String
  commentId: String
  language: String
  author: String
  ipfsHash: String
  content: String
}

input commenttranslation_OrderByInput {
  id: OrderBy
  commentId: OrderBy
  language: OrderBy
  author: OrderBy
  ipfsHash: OrderBy
  content: OrderBy
}

input userachievement_WhereInput {
  id: String
  userId: String
  achievementId: String
}

input userachievement_OrderByInput {
  id: OrderBy
  userId: OrderBy
  achievementId: OrderBy
}

type userpermission {
  id: String!
  userId: String!
  permission: String!
  user(where: user_WhereInput, orderBy: user_OrderByInput, limit: Int, offset: Int): [user]
}

input userpermission_WhereInput {
  id: String
  userId: String
  permission: String
}

input userpermission_OrderByInput {
  id: OrderBy
  userId: OrderBy
  permission: OrderBy
}

type userreward {
  id: String!
  periodId: Int!
  userId: String!
  tokenToReward: String!
  isPaid: Int
  period(where: period_WhereInput, orderBy: period_OrderByInput, limit: Int, offset: Int): [period]
  user(where: user_WhereInput, orderBy: user_OrderByInput, limit: Int, offset: Int): [user]
}

type period {
  id: Int!
  startPeriodTime: Int!
  endPeriodTime: Int!
  isFinished: Int!
  userreward(limit: Int, offset: Int, where: userreward_WhereInput, orderBy: userreward_OrderByInput): [userreward]
}

input userreward_WhereInput {
  id: String
  periodId: String
  userId: String
  tokenToReward: String
  isPaid: String
}

input userreward_OrderByInput {
  id: OrderBy
  periodId: OrderBy
  userId: OrderBy
  tokenToReward: OrderBy
  isPaid: OrderBy
}

input period_WhereInput {
  id: String
  startPeriodTime: String
  endPeriodTime: String
  isFinished: String
}

input period_OrderByInput {
  id: OrderBy
  startPeriodTime: OrderBy
  endPeriodTime: OrderBy
  isFinished: OrderBy
}

type contractinfo {
  id: String!
  deployTime: Int!
  periodLength: Int!
  lastUpdatePeriod: Int
}

input contractinfo_WhereInput {
  id: String
  deployTime: String
  periodLength: String
  lastUpdatePeriod: String
}

input contractinfo_OrderByInput {
  id: OrderBy
  deployTime: OrderBy
  periodLength: OrderBy
  lastUpdatePeriod: OrderBy
}

"Integers that will have a value of 0 or more."
scalar UnsignedInt

"The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch."
scalar Timestamp

input knex_migrations_WhereInput {
  id: String
  name: String
  batch: String
  migration_time: String
}

input knex_migrations_OrderByInput {
  id: OrderBy
  name: OrderBy
  batch: OrderBy
  migration_time: OrderBy
}

input knex_migrations_lock_WhereInput {
  index: String
  is_locked: String
}

input knex_migrations_lock_OrderByInput {
  index: OrderBy
  is_locked: OrderBy
}

type Mutation

input achievement_InsertInput {
  id: Int!
  factCount: Int
  maxCount: Int
  achievementURI: String
  achievementsType: Int
  lowerValue: Int
  name: String
  description: String
  image: String
  communityId: String
  attrcommunityId: String
  attrEvent: String
  attrType: String
}

input achievement_UpdateInput {
  id: Int
  factCount: Int
  maxCount: Int
  achievementURI: String
  achievementsType: Int
  lowerValue: Int
  name: String
  description: String
  image: String
  communityId: String
  attrcommunityId: String
  attrEvent: String
  attrType: String
}

input comment_InsertInput {
  id: String!
  id2: String
  ipfsHash: String
  ipfsHash2: String
  author: String!
  rating: Int
  postTime: Int!
  postId: String!
  parentReplyId: Int
  content: String!
  language: Int
  isDeleted: Int
}

input comment_UpdateInput {
  id: String
  id2: String
  ipfsHash: String
  ipfsHash2: String
  author: String
  rating: Int
  postTime: Int
  postId: String
  parentReplyId: Int
  content: String
  language: Int
  isDeleted: Int
}

input commenttranslation_InsertInput {
  id: String!
  commentId: String!
  language: Int
  author: String!
  ipfsHash: String
  content: String
}

input commenttranslation_UpdateInput {
  id: String
  commentId: String
  language: Int
  author: String
  ipfsHash: String
  content: String
}

input community_InsertInput {
  id: String!
  name: String
  description: String
  website: String
  communitySite: String
  language: String
  avatar: String
  isFrozen: Int
  creationTime: Int!
  postCount: Int
  documentationCount: Int
  deletedPostCount: Int
  replyCount: Int
  tagsCount: Int
  followingUsers: Int
  ipfsHash: String
  ipfsHash2: String
}

input community_UpdateInput {
  id: String
  name: String
  description: String
  website: String
  communitySite: String
  language: String
  avatar: String
  isFrozen: Int
  creationTime: Int
  postCount: Int
  documentationCount: Int
  deletedPostCount: Int
  replyCount: Int
  tagsCount: Int
  followingUsers: Int
  ipfsHash: String
  ipfsHash2: String
}

input communitydocumentation_InsertInput {
  id: String!
  documentationJSON: String
  ipfsHash: String
}

input communitydocumentation_UpdateInput {
  id: String
  documentationJSON: String
  ipfsHash: String
}

input communitytranslation_InsertInput {
  id: String!
  communityId: String!
  name: String
  description: String
  language: String
  enableAutotranslation: Int
}

input communitytranslation_UpdateInput {
  id: String
  communityId: String
  name: String
  description: String
  language: String
  enableAutotranslation: Int
}

input contractinfo_InsertInput {
  id: String!
  deployTime: Int!
  periodLength: Int!
  lastUpdatePeriod: Int
}

input contractinfo_UpdateInput {
  id: String
  deployTime: Int
  periodLength: Int
  lastUpdatePeriod: Int
}

input history_InsertInput {
  id: String!
  transactionHash: String!
  postId: String!
  replyId: String
  commentId: String
  eventEntity: String
  eventName: String
  actionUser: String!
  timeStamp: Int!
}

input history_UpdateInput {
  id: String
  transactionHash: String
  postId: String
  replyId: String
  commentId: String
  eventEntity: String
  eventName: String
  actionUser: String
  timeStamp: Int
}

input knex_migrations_InsertInput {
  id: UnsignedInt!
  name: String
  batch: Int
  migration_time: Timestamp
}

input knex_migrations_UpdateInput {
  id: UnsignedInt
  name: String
  batch: Int
  migration_time: Timestamp
}

input knex_migrations_lock_InsertInput {
  index: UnsignedInt!
  is_locked: Int
}

input knex_migrations_lock_UpdateInput {
  index: UnsignedInt
  is_locked: Int
}

input period_InsertInput {
  id: Int!
  startPeriodTime: Int!
  endPeriodTime: Int!
  isFinished: Int!
}

input period_UpdateInput {
  id: Int
  startPeriodTime: Int
  endPeriodTime: Int
  isFinished: Int
}

input post_InsertInput {
  id: String!
  id2: String
  ipfsHash: String
  ipfsHash2: String
  postType: Int!
  author: String!
  rating: Int
  postTime: Int
  lastMod: Int
  communityId: String!
  title: String!
  content: String!
  postContent: String!
  commentCount: Int
  replyCount: Int
  isDeleted: Int
  officialReply: Int
  bestReply: Int
  language: Int
  handle: String
  messengerType: Int
}

input post_UpdateInput {
  id: String
  id2: String
  ipfsHash: String
  ipfsHash2: String
  postType: Int
  author: String
  rating: Int
  postTime: Int
  lastMod: Int
  communityId: String
  title: String
  content: String
  postContent: String
  commentCount: Int
  replyCount: Int
  isDeleted: Int
  officialReply: Int
  bestReply: Int
  language: Int
  handle: String
  messengerType: Int
}

input posttag_InsertInput {
  id: String!
  postId: String!
  tagId: String!
}

input posttag_UpdateInput {
  id: String
  postId: String
  tagId: String
}

input posttranslation_InsertInput {
  id: String!
  postId: String!
  language: Int
  author: String!
  ipfsHash: String
  title: String!
  content: String
}

input posttranslation_UpdateInput {
  id: String
  postId: String
  language: Int
  author: String
  ipfsHash: String
  title: String
  content: String
}

input postvotehistory_InsertInput {
  id: String!
  postId: String!
  direction: Int
  userId: String!
}

input postvotehistory_UpdateInput {
  id: String
  postId: String
  direction: Int
  userId: String
}

input reply_InsertInput {
  id: String!
  id2: String
  ipfsHash: String
  ipfsHash2: String
  author: String!
  rating: Int
  postTime: Int!
  postId: String!
  parentReplyId: Int!
  content: String!
  commentCount: Int
  isDeleted: Int
  isOfficialReply: Int
  isBestReply: Int
  isFirstReply: Int
  isQuickReply: Int
  language: Int
  handle: String
  messengerType: Int
}

input reply_UpdateInput {
  id: String
  id2: String
  ipfsHash: String
  ipfsHash2: String
  author: String
  rating: Int
  postTime: Int
  postId: String
  parentReplyId: Int
  content: String
  commentCount: Int
  isDeleted: Int
  isOfficialReply: Int
  isBestReply: Int
  isFirstReply: Int
  isQuickReply: Int
  language: Int
  handle: String
  messengerType: Int
}

input replytranslation_InsertInput {
  id: String!
  replyId: String!
  language: Int
  author: String!
  ipfsHash: String
  content: String
}

input replytranslation_UpdateInput {
  id: String
  replyId: String
  language: Int
  author: String
  ipfsHash: String
  content: String
}

input replyvotehistory_InsertInput {
  id: String!
  replyId: String!
  direction: Int
  userId: String!
}

input replyvotehistory_UpdateInput {
  id: String
  replyId: String
  direction: Int
  userId: String
}

input tag_InsertInput {
  id: String!
  communityId: String!
  name: String!
  description: String
  postCount: Int
  deletedPostCount: Int
  language: Int
  ipfsHash: String
  ipfsHash2: String
}

input tag_UpdateInput {
  id: String
  communityId: String
  name: String
  description: String
  postCount: Int
  deletedPostCount: Int
  language: Int
  ipfsHash: String
  ipfsHash2: String
}

input tagtranslation_InsertInput {
  id: String!
  tagId: String!
  name: String!
  description: String
  language: Int
}

input tagtranslation_UpdateInput {
  id: String
  tagId: String
  name: String
  description: String
  language: Int
}

input user_InsertInput {
  id: String!
  displayName: String
  postCount: Int
  replyCount: Int
  company: String
  position: String
  location: String
  about: String
  avatar: String
  creationTime: Int!
  ipfsHash: String
  ipfsHash2: String
}

input user_UpdateInput {
  id: String
  displayName: String
  postCount: Int
  replyCount: Int
  company: String
  position: String
  location: String
  about: String
  avatar: String
  creationTime: Int
  ipfsHash: String
  ipfsHash2: String
}

input userachievement_InsertInput {
  id: String!
  userId: String!
  achievementId: Int!
}

input userachievement_UpdateInput {
  id: String
  userId: String
  achievementId: Int
}

input usercommunity_InsertInput {
  id: String!
  userId: String!
  communityId: String!
}

input usercommunity_UpdateInput {
  id: String
  userId: String
  communityId: String
}

input usercommunityrating_InsertInput {
  id: String!
  communityId: String!
  rating: Int
  userId: String!
}

input usercommunityrating_UpdateInput {
  id: String
  communityId: String
  rating: Int
  userId: String
}

input userpermission_InsertInput {
  id: String!
  userId: String!
  permission: String!
}

input userpermission_UpdateInput {
  id: String
  userId: String
  permission: String
}

input userreward_InsertInput {
  id: String!
  periodId: Int!
  userId: String!
  tokenToReward: String!
  isPaid: Int
}

input userreward_UpdateInput {
  id: String
  periodId: Int
  userId: String
  tokenToReward: String
  isPaid: Int
}