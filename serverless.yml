service: peeranha-query-index

custom:
  stage: ${opt:stage, 'offline'}
  region: ${file(./stages/${self:custom.stage}.yml):region}
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
  serverless-offline:
    httpPort: 5000
    noPrependStageInUrl: true
    ignoreJWTSignature: true

provider:
  name: aws
  region: ${self:custom.region}
  runtime: nodejs16.x
  environment: ${file(./stages/${self:custom.stage}.yml):environment}
  memorySize: 512
  timeout: 10
  logRetentionInDays: 30
  lambdaHashingVersion: 20201221
  logs:
    httpApi: true
  httpApi:
    cors: true
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - sqs:SendMessage
          Resource: "*"
  vpc:
    securityGroupIds:
      - ${self:provider.environment.SECURITY_GROUP_ID}
    subnetIds:
      - ${self:provider.environment.SUBNET_ID_1}
      - ${self:provider.environment.SUBNET_ID_2}

functions:
  graphql:
    handler: src/handlers/graphql.handler
    events:
      - httpApi:
          path: '/graphql'
          method: 'POST'

  first-period-trigger:
    handler: src/handlers/first-period-trigger.handler
    timeout: 300
    events:
      - schedule:
          name: first-period-trigger-${self:custom.stage}
          rate: rate(10 minutes)

  second-period-trigger:
    handler: src/handlers/second-period-trigger.handler
    timeout: 300
    events:
      - schedule:
          name: second-period-trigger-${self:custom.stage}
          rate: rate(10 minutes)
  
  first-polygon-event-listener-webhook:
    handler: src/handlers/first-polygon-event-listener-webhook.handler
    timeout: 28
    events:
      - httpApi:
          path: '/polygon-event-listener/first-webhook'
          method: 'POST'
  
  second-polygon-event-listener-webhook:
    handler: src/handlers/second-polygon-event-listener-webhook.handler
    timeout: 28
    events:
      - httpApi:
          path: '/polygon-event-listener/second-webhook'
          method: 'POST'

  first-indexing-queue:
    handler: src/handlers/first-indexing-queue.handler
    timeout: 50
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - firstQueue
              - Arn

  second-indexing-queue:
    handler: src/handlers/second-indexing-queue.handler
    timeout: 50
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - secondQueue
              - Arn

resources:
  Resources:
    firstQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.stage}-firstQueue.fifo
        VisibilityTimeout: 50
        FifoQueue: true
        ContentBasedDeduplication: true
        DeduplicationScope: messageGroup
        FifoThroughputLimit: perMessageGroupId

    secondQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.stage}-secondQueue.fifo
        VisibilityTimeout: 50
        FifoQueue: true
        ContentBasedDeduplication: true
        DeduplicationScope: messageGroup
        FifoThroughputLimit: perMessageGroupId

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin