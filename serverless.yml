service: peeranha-query-index

custom:
  stage: ${opt:stage, 'offline'}
  region: ${file(./stages/${self:custom.stage}.yml):region}
  webpack:
    webpackConfig: 'webpack.config.js'
    includeModules: true
  serverless-offline:
    httpPort: 5000
    noPrependStageInUrl: true
    ignoreJWTSignature: true
  dynamodb:
    stages:
      - offline
    start:
      port: 4659
      inMemory: true
      migrate: true
  serverless-offline-sqs:
    autoCreate: true
    endpoint: http://0.0.0.0:9324
    region: ${self:custom.region}
    accessKeyId: root
    secretAccessKey: root
  elasticmq:
    stages:
      - dev
    start:
      port: 9324
      noStart: false

provider:
  name: aws
  region: ${self:custom.region}
  runtime: nodejs16.x
  environment: ${file(./stages/${self:custom.stage}.yml):environment}
  memorySize: 512
  timeout: 10
  logRetentionInDays: 30
  logs:
    httpApi: true
  httpApi:
    cors: true
  ecr:
    images:
      peeranha-ecs-nodejs:
        path: ./
        file: Dockerfile
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - secretsmanager:GetSecretValue
            - sqs:SendMessage
            - dynamodb:DescribeTable
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - translate:TranslateText
            - comprehend:DetectDominantLanguage
          Resource: "*"
  vpc:
    securityGroupIds:
      - ${self:provider.environment.SECURITY_GROUP_ID}
    subnetIds:
      - ${self:provider.environment.SUBNET_ID_1}
      - ${self:provider.environment.SUBNET_ID_2}
fargate:
  vpc:
    securityGroupIds:
      - ${self:provider.environment.SECURITY_GROUP_ID}
    subnetIds:
      - ${self:provider.environment.SUBNET_ID_1}
      - ${self:provider.environment.SUBNET_ID_2}
    assignPublicIp: true
  tasks:
    polygon-events-listener:
      name: ${self:custom.stage}-polygon-events-listener
      image: peeranha-ecs-nodejs
      command:
        - "./dist/polygon-events-listener.mjs"
      environment:
        ENV: ${self:provider.environment.ENV}
        REGION: ${self:provider.environment.REGION}
        SQS_ENDPOINT: ${self:provider.environment.SQS_ENDPOINT}
        AWS_ACCOUNT_ID: ${self:provider.environment.AWS_ACCOUNT_ID}
        DYNAMODB_ENDPOINT: ${self:provider.environment.DYNAMODB_ENDPOINT}
        POLYGON_COMMUNITY_ADDRESS: ${self:provider.environment.POLYGON_COMMUNITY_ADDRESS}
        POLYGON_CONTENT_ADDRESS: ${self:provider.environment.POLYGON_CONTENT_ADDRESS}
        POLYGON_USER_ADDRESS: ${self:provider.environment.POLYGON_USER_ADDRESS}
        POLYGON_TOKEN_ADDRESS: ${self:provider.environment.POLYGON_TOKEN_ADDRESS}
        POLYGON_NFT_ADDRESS: ${self:provider.environment.POLYGON_NFT_ADDRESS}
        START_BLOCK_NUMBER: ${self:provider.environment.POLYGON_START_BLOCK_NUMBER}
        RPC_POLYGON_ENDPOINT: ${self:provider.environment.RPC_POLYGON_ENDPOINT}

    edgeware-events-listener:
      name: ${self:custom.stage}-edgeware-events-listener
      image: peeranha-ecs-nodejs
      command:
        - "./dist/edgeware-events-listener.mjs"
      environment:
        ENV: ${self:provider.environment.ENV}
        REGION: ${self:provider.environment.REGION}
        SQS_ENDPOINT: ${self:provider.environment.SQS_ENDPOINT}
        AWS_ACCOUNT_ID: ${self:provider.environment.AWS_ACCOUNT_ID}
        DYNAMODB_ENDPOINT: ${self:provider.environment.DYNAMODB_ENDPOINT}
        EDGEWARE_COMMUNITY_ADDRESS: ${self:provider.environment.EDGEWARE_COMMUNITY_ADDRESS}
        EDGEWARE_CONTENT_ADDRESS: ${self:provider.environment.EDGEWARE_CONTENT_ADDRESS}
        EDGEWARE_USER_ADDRESS: ${self:provider.environment.EDGEWARE_USER_ADDRESS}
        EDGEWARE_TOKEN_ADDRESS: ${self:provider.environment.EDGEWARE_TOKEN_ADDRESS}
        EDGEWARE_NFT_ADDRESS: ${self:provider.environment.EDGEWARE_NFT_ADDRESS}
        START_BLOCK_NUMBER: ${self:provider.environment.EDGEWARE_START_BLOCK_NUMBER}
        RPC_EDGEWARE_ENDPOINT: ${self:provider.environment.RPC_EDGEWARE_ENDPOINT}

    sui-events-listener:
      name: ${self:custom.stage}-sui-events-listener
      image: peeranha-ecs-nodejs
      command:
        - "./dist/sui-events-listener.mjs"
      environment:
        ENV: ${self:provider.environment.ENV}
        REGION: ${self:provider.environment.REGION}
        SQS_ENDPOINT: ${self:provider.environment.SQS_ENDPOINT}
        AWS_ACCOUNT_ID: ${self:provider.environment.AWS_ACCOUNT_ID}
        DYNAMODB_ENDPOINT: ${self:provider.environment.DYNAMODB_ENDPOINT}
        SUI_PACKAGE_ADDRESS: ${self:provider.environment.SUI_PACKAGE_ADDRESS}
        SUI_USERS_RATING_COLLECTION: ${self:provider.environment.SUI_USERS_RATING_COLLECTION}

functions:
  graphql:
    handler: src/handlers/graphql.handler
    events:
      - httpApi:
          path: '/graphql'
          method: 'POST'

  # period-trigger:
  #   handler: src/handlers/period-trigger.handler
  #   timeout: 300
  #   events:
  #     - schedule:
  #         name: period-trigger-${self:custom.stage}
  #         rate: rate(10 minutes)

  # polygon-event-listener-webhook:
  #   handler: src/handlers/polygon-event-listener-webhook.handler
  #   timeout: 28
  #   events:
  #     - httpApi:
  #         path: '/polygon-event-listener/polygon-webhook'
  #         method: 'POST'
  
  polygon-onchain-events-read:
    handler: src/handlers/polygon-onchain-events-read.handler
    timeout: 300
    events:
      - schedule:
          name: polygon-read-onchain-events-${self:custom.stage}
          rate: rate(1 minute)
  
  edgeware-onchain-events-read:
    handler: src/handlers/edgeware-onchain-events-read.handler
    timeout: 300
    events:
      - schedule:
          name: edgeware-read-onchain-events-${self:custom.stage}
          rate: rate(1 minute)
  
  # sui-onchain-events-read:
  #   handler: src/handlers/sui-onchain-events-read.handler
  #   timeout: 300
  #   events:
  #     - schedule:
  #         name: sui-read-onchain-events-${self:custom.stage}
  #         rate: rate(1 minute)

  polygon-indexing-queue:
    handler: src/handlers/polygon-indexing-queue.handler
    timeout: 50
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - polygonQueue
              - Arn

  edgeware-indexing-queue:
    handler: src/handlers/edgeware-indexing-queue.handler
    timeout: 50
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - edgewareQueue
              - Arn
      
  sui-indexing-queue:
    handler: src/handlers/sui-indexing-queue.handler
    timeout: 50
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - suiQueue
              - Arn

  sui-content-queue:
    handler: src/handlers/sui-content-queue.handler
    timeout: 50
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - suiContentQueue
              - Arn
      
  first-sui-indexing-queue:
    handler: src/handlers/sui-first-indexing-queue.handler
    timeout: 50
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - firstSuiQueue
              - Arn

  first-sui-content-queue:
    handler: src/handlers/sui-first-content-queue.handler
    timeout: 50
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - firstSuiContentQueue
              - Arn

resources:
  Resources:
    queryIndexConfigTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.stage}-query-index-config
        AttributeDefinitions:
          - AttributeName: key
            AttributeType: S
        KeySchema:
          - AttributeName: key
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    polygonQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.stage}-polygonQueue.fifo
        VisibilityTimeout: 50
        FifoQueue: true
        ContentBasedDeduplication: true
        DeduplicationScope: messageGroup
        FifoThroughputLimit: perMessageGroupId

    edgewareQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.stage}-edgewareQueue.fifo
        VisibilityTimeout: 50
        FifoQueue: true
        ContentBasedDeduplication: true
        DeduplicationScope: messageGroup
        FifoThroughputLimit: perMessageGroupId

    suiQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.stage}-suiQueue.fifo
        VisibilityTimeout: 50
        FifoQueue: true
        ContentBasedDeduplication: true
        DeduplicationScope: messageGroup
        FifoThroughputLimit: perMessageGroupId

    suiContentQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.stage}-suiContentQueue.fifo
        VisibilityTimeout: 50
        FifoQueue: true
        ContentBasedDeduplication: true
        DeduplicationScope: messageGroup
        FifoThroughputLimit: perMessageGroupId

    firstSuiQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.stage}-firstSuiQueue.fifo
        VisibilityTimeout: 50
        FifoQueue: true
        ContentBasedDeduplication: true
        DeduplicationScope: messageGroup
        FifoThroughputLimit: perMessageGroupId

    firstSuiContentQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.stage}-firstSuiContentQueue.fifo
        VisibilityTimeout: 50
        FifoQueue: true
        ContentBasedDeduplication: true
        DeduplicationScope: messageGroup
        FifoThroughputLimit: perMessageGroupId

package:
  individually: true

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-offline-sqs
  - serverless-offline-elasticmq
  - serverless-fargate